path    = require 'path'
ake     = require 'cc.ake'
bkr     = require('cc.extend').baker
{exec}  = require 'child_process'

do ake.nodeModulePath

_bakeResources = ->
  bkr.bake 'lib/cc/gamer.coffee', 'cc/gamer.js',
    doNotMinify: true, doNotCompileCoffee: true, noCcLoader: true,
    includeFiles: [ path.join('node_modules', 'cc.extend', 'cc', 'extend.js'),
                    'gl-matrix.js' ]

task 'web', 'build cc/gamer.js for use in websites', (options) ->
  ake.assert """
    mkdir -p cc &&
    ([ -f gl-matrix.js ] || wget https://raw.github.com/toji/gl-matrix/master/gl-matrix.js) &&
    coffee -c test""",
    _bakeResources
    'ln -sf ../cc test'

task 'clean', 'clean everything generated by build system', (options) ->
  ake.assert "rm -rf `grep '^/' .gitignore | sed 's,^/,,'`"

testServer = ->
  express = require 'express'
  app     = express.createServer()
  port    = process.env.port or 8014
  app.configure ->
    app.use express.static path.join(process.cwd(), 'test')
  console.log "cc.gamer test server listening on: #{port}"
  console.log "please go to http://localhost:#{port}/"
  app.listen port

task 'test', 'test cc.extend', (options) ->
  invoke 'web'
  ake.assert testServer

tryExec = (prefix, cmd) ->
  exec cmd, (err, stdout, stderr) ->
    if err
      console.log prefix, "error #{stderr}"
    else
      console.log prefix, "success"
    return

task 'watch', 'start test server then watch source files and recompile as they change', (options) ->
  invoke 'web'
  ake.assert ->
    do testServer
    ake.watch 'test',
      /.coffee$/, (fname) ->
        tryExec "change #{fname}", 'coffee -c test'
    ake.watch 'lib/cc',
      /.coffee$/, (fname) ->
        console.log "rebuild cc/gamer.js"
        do _bakeResources


# vim:ts=2 sw=2
