// Generated by CoffeeScript 1.3.3
(function() {
  var FriendEntity, Game, HeroEntity, ImpostorEntity, game, resources;

  resources = new cc.Resources;

  Game = cc.Game.extend({
    backgroundColor: [1.0, 0.72, 0.0, 1.0],
    gravity: {
      x: 0,
      y: 2
    },
    autopilot: false,
    booted: function() {
      var i;
      this.input.fallthrough = true;
      this.input.bind(cc.key.z, 'left');
      this.input.bind(cc.key.z, 'left');
      this.input.bind(cc.key.left, 'left');
      this.input.bind(cc.key.c, 'right');
      this.input.bind(cc.key.right, 'right');
      this.input.bind(cc.key.x, 'down');
      this.input.bind(cc.key.down, 'down');
      this.input.bind(cc.key.s, 'up');
      this.input.bind(cc.key.up, 'up');
      this.input.bind(cc.key.a, 'toggle_autopilot');
      this.input.bind(cc.key.t, 'toggle_scale');
      this.input.bind(cc.key.r, 'reload');
      i = 0;
      while (true) {
        this.spawnEntity(ImpostorEntity, cc.rand(0, 300), cc.rand(0, 300));
        if (++i > 40) {
          break;
        }
      }
      i = 0;
      while (true) {
        this.spawnEntity(FriendEntity, cc.rand(0, 300), cc.rand(0, 300));
        if (++i > 10) {
          break;
        }
      }
      this.hero = this.spawnEntity(HeroEntity, 0, 0);
    },
    update: function() {
      if (this.input.pressed.reload) {
        document.location.reload(true);
      }
      if (this.input.pressed.toggle_scale) {
        this.setScale(this.scale === 2 ? 1 : 2);
      }
      if (this.input.pressed.toggle_autopilot) {
        this.autopilot = !this.autopilot;
      }
      return this.parent();
    }
  });

  game = new Game(resources, {
    scale: 1
  });

  HeroEntity = cc.Entity.extend({
    bounciness: 0.5,
    category: 1,
    density: 2,
    mask: 2,
    spriteSheet: resources.spriteSheet('chars.png', 32, 48),
    hitbox: {
      width: 24,
      height: 40
    },
    init: function(game, x, y, settings) {
      this.timer = game.timer(1);
      this.parent(game, x, y, settings);
      this.pos.y = 80;
      return this.addSprite('walk', 0.1, [30, 31, 32, 31]);
    },
    update: function() {
      this.parent();
      if (this.game.input.released.toggle_autopilot) {
        this.setV(0, 0);
      }
      if (this.timer.expired()) {
        if (this.game.autopilot) {
          this.setV(cc.rand(-200, 200), cc.rand(-200, 100));
        }
        this.timer.reset();
      }
      if (this.game.input.state.left) {
        this.setV(-200, 0);
      } else if (this.game.input.state.right) {
        this.setV(200, 0);
      } else if (this.game.input.state.up) {
        this.setV(0, -200);
      } else if (this.game.input.state.down) {
        this.setV(0, 200);
      }
      return this._keepInView();
    },
    _keepInView: function() {
      var maxX, maxY;
      maxX = this.game.maxX - this.width;
      if (this.pos.x > maxX) {
        this.pos.x = maxX;
        if (!(this.v.x < 0)) {
          this.v.x = -this.v.x;
        }
        this.mark();
      } else if (this.pos.x < -cc.ZERO) {
        this.pos.x = 0;
        if (!(this.v.x > 0)) {
          this.v.x = -this.v.x;
        }
        this.mark();
      }
      maxY = this.game.maxY - this.height;
      if (this.pos.y > maxY) {
        this.pos.y = maxY;
        if (!(this.v.y < 0)) {
          this.v.y = -this.v.y;
        }
        return this.mark();
      } else if (this.pos.y < -cc.ZERO) {
        this.pos.y = 0;
        if (!(this.v.y > 0)) {
          this.v.y = -this.v.y;
        }
        return this.mark();
      }
    }
  });

  ImpostorEntity = HeroEntity.extend({
    density: 0,
    category: 2,
    mask: 1,
    init: function(game, x, y, settings) {
      this.v.x = 20;
      cc.Entity.prototype.init.call(this, game, x, y, settings);
      return this.addSprite('walk', 0.1, [27, 28, 29, 28]);
    },
    update: function() {
      cc.Entity.prototype.update.call(this);
      return this._keepInView();
    }
  });

  FriendEntity = ImpostorEntity.extend({
    category: 6,
    mask: 5,
    init: function(game, x, y, settings) {
      this.v.x = -20;
      cc.Entity.prototype.init.call(this, game, x, y, settings);
      return this.addSprite('walk', 0.1, [81, 82, 83, 82]);
    }
  });

  window.webGLStart = function() {
    var cons, now;
    cons = document.getElementById('console');
    cons.innerHTML = 0;
    now = new Date().getTime();
    setInterval(function() {
      var _now;
      _now = new Date().getTime();
      cons.innerHTML = (Math.floor(game.ticks / ((_now - now) / 1000))) + " : " + game.updates + " : " + game.skips;
      now = _now;
      return game.ticks = game.skips = game.updates = 0;
    }, 1000);
    return game.main("#game-canvas");
  };

}).call(this);
